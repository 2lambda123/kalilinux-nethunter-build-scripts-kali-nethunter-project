#!/data/data/com.termux/files/usr/bin/bash -e

BASE_URL=https://images.kali.org/nethunter

unsupported_arch() {
    printf "$red"
    echo "[*] Unsupported Architecture\n\n"
    printf "$reset"
    exit
}

get_arch() {
    printf "$blue [*] Checking device architecture ..."
    case $(getprop ro.product.cpu.abi) in
        arm64-v8a)
            SYS_ARCH=arm64
            ;;
        armeabi|armeabi-v7a)
            SYS_ARCH=armhf
            ;;
        *)
            unsupported_arch
            ;;
    esac
}

set_strings() {
    printf "$blue [*] Checking device architecture ..."
    CHROOT=kali-${SYS_ARCH}
    IMAGE_NAME=kalifs-${FS_ARCH}-full.tar.xz
    SHA_NAME=kalifs-${FS_ARCH}-full.sha512sum
}    

prepare_fs() {
    rm -rf ${CHROOT}; || :
} 

cleanup() {
     rm -rf $HOME\$IMAGE_NAME; || :
} 

check_dependencies() {
    printf "${blue}\n[*] Checking package dependencies...\n"
    apt update -y &> /dev/null

    for i in proot tar axel; do
        if [ -e $PREFIX/bin/$i ]; then
            echo "  $i is OK"
        else
            printf "Installing ${i}...\n"
            apt install -y $i || {
                printf "$redERROR: Failed to install packages.\n Exiting.\n"
                printf "$reset"
	        exit
            }
        fi
    done
    apt upgrade -y
}


get_url() {
    ROOTFS_URL="${BASE_URL}/$IMAGE_NAME"
    SHA_URL="${BASE_URL}/SHA_NAME"
}

get_rootfs() {
    printf "$blue [*] Downloading rootfs...$reset\n\n"
    geturl $FS_ARCH $FS_SIZE
    axel ${EXTRAARGS} --alternate "$ROOTFS_URL"
}

get_sha() {
    printf "\n${blue} [*] Getting SHA ... $reset\n\n"
    geturl $FS_ARCH $FS_SIZE
    axel ${EXTRAARGS} --alternate "$SHA_URL"
}

verify_sha() {
    printf "\n${blue} [*] Verifying integrity of rootfs...\n"
    sha512sum -c $SHA_NAME || {
        printf "$red Rootfs corrupted. Please run this installer again or download the file manually\n${reset}"
        exit 1
    }
}

extract_rootfs() {
    printf "$blue [*] Extracting rootfs... $reset\n\n"
    proot --link2symlink tar -xf $IMAGE_NAME 2> /dev/null || :
}


create_launcher() {
    nh_launcher=${PREFIX}/bin/nethunter
    cat > $bin <<- EOF
#!/data/data/com.termux/files/usr/bin/bash -e
cd \${HOME}
## termux-exec sets LD_PRELOAD so let's unset it before continuing
unset LD_PRELOAD
cmdline="proot \
        --link2symlink \
        -0 \
        -r $CHROOT \
        -b /dev \
        -b /proc \
        -b $CHROOT/root:/dev/shm \
        -w /root \
           /usr/bin/env -i \
           HOME=/root \
           PATH=/usr/local/sbin:/usr/local/bin:/bin:/usr/bin:/sbin:/usr/sbin \
           TERM=\$TERM \
           LANG=C.UTF-8 \
           /bin/bash --login"

cmd="\$@"
if [ -z "\$1" ];then
    exec \$cmdline
else
    \$cmdline -c "\$cmd"
fi
EOF

	chmod 700 $nh_launcher
}

# Main
red='\033[1;31m'
yellow='\033[1;33m'
blue='\033[1;34m'
reset='\033[0m'

clear
EXTRAARGS=""
if [[ ! -z $1 ]]; then
    EXTRAARGS=$1
    if [[ $EXTRAARGS != "--insecure" ]]; then
        EXTRAARGS=""
    fi
fi

cd $HOME
printf "${blue}##################################################\n"
printf "${blue}##                                              ##\n"
printf "${blue}##  88      a8P         db        88        88  ##\n"
printf "${blue}##  88    .88'         d88b       88        88  ##\n"
printf "${blue}##  88   88'          d8''8b      88        88  ##\n"
printf "${blue}##  88 d88           d8'  '8b     88        88  ##\n"
printf "${blue}##  8888'88.        d8YaaaaY8b    88        88  ##\n"
printf "${blue}##  88P   Y8b      d8''''''''8b   88        88  ##\n"
printf "${blue}##  88     '88.   d8'        '8b  88        88  ##\n"
printf "${blue}##  88       Y8b d8'          '8b 888888888 88  ##\n"
printf "${blue}##                                              ##\n"
printf "${blue}####  ############# NetHunter ####################\n"

get_arch
set_strings
prepare_fs
check_dependencies
get_rootfs
get_sha
verify_sha
extract_rootfs
create_launcher
##cleanup

printf "$blue [*] Configuring NetHunter for Termux  ..."



printf "\n${yellow} NetHunter for Termux installed successfully"
printf "$reset"
